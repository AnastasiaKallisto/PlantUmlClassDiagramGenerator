using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using PlantUmlClassDiagramGenerator.SourceGenerator.Extensions;
namespace PlantUmlClassDiagramGenerator.SourceGenerator;

public class GeneratorOptions(AnalyzerConfigOptionsProvider config, string assemblyName)
{

    [Flags]
    public enum Accessibilities
    {
        None = 0,
        Public = 0x01,
        Protected = 0x02,
        Internal = 0x04,
        ProtectedInternal = 0x08,
        PrivateProtected = 0x10,
        Private = 0x20,
        All = Public | Protected | Internal | ProtectedInternal | PrivateProtected | Private
    }

    public string AssemblyName { get; set; } = assemblyName;
    public string OutputDir { get; set; } = GetOutputDir(config);
    public bool AttributeRequierd { get; set; } = GetAttributeRequierd(config);
    public Accessibilities IncludeMemberAccessibilities { get; set; } = GetIncludeAccessibilities(config);
    public Accessibilities ExcludeMemberAccessibilities { get; set; } = GetExcludeAccessibilities(config);

    public static Accessibilities GetIncludeAccessibilities(AnalyzerConfigOptionsProvider config)
    {
        return GetAccessibilities(config, "build_property.PlantUmlGenerator_IncludeMemberAccessibilities", Accessibilities.All);
    }

    public static Accessibilities GetExcludeAccessibilities(AnalyzerConfigOptionsProvider config)
    {
        return GetAccessibilities(config, "build_property.PlantUmlGenerator_ExcludeMemberAccessibilities", Accessibilities.None);
    }

    private static Accessibilities GetAccessibilities(AnalyzerConfigOptionsProvider config, string optionName, Accessibilities defaultValue)
    {
        return config.GlobalOptions.TryGetValue(optionName, out var acc)
            ? (Enum.TryParse<Accessibilities>(acc, out var value)
                ? value
                : defaultValue)
            : defaultValue;
    }

    public static bool GetAttributeRequierd(AnalyzerConfigOptionsProvider config)
    {
        return !config.GlobalOptions.TryGetValue("build_property.PlantUmlGenerator_AttributeRequierd", out var requierd)
            || (!bool.TryParse(requierd, out var boolean)
            || boolean);
    }

    public static string GetOutputDir(AnalyzerConfigOptionsProvider config)
    {
        return config.GlobalOptions.TryGetValue("build_property.PlantUmlGenerator_OutputDir", out var path)
            ? path
            : (config.GlobalOptions.TryGetValue("build_property.projectDir", out var dir)
                ? Path.Combine(dir, "generated-uml")
                : "");
    }

    public bool DeclaredTypeFilter(INamedTypeSymbol symbol)
    {
        return !symbol.IsAutoGeneratedSymbol()
            && !symbol.HasPlantUmlIgnoreAttribute()
            && (!AttributeRequierd || symbol.HasPlantUmlDiagramAttribute());
    }

    public bool MemberTypeFilter(ISymbol memberSymbol, INamedTypeSymbol typeSymbol)
    {
        var i = typeSymbol.GetPlantUmlDiagramAttributeArg("IncludeMemberAccessibilities");
        var e = typeSymbol.GetPlantUmlDiagramAttributeArg("ExcludeMemberAccessibilities");
        var includes = i is not null
            ? (Accessibilities)i
            : IncludeMemberAccessibilities;
        var excludes = e is not null
            ? (Accessibilities)e
            : ExcludeMemberAccessibilities;
        return !memberSymbol.HasPlantUmlIgnoreAttribute()
            && HasAccessibility(memberSymbol, includes, excludes);
    }

    private static bool HasAccessibility(ISymbol symbol, Accessibilities includes, Accessibilities excludes)
    {
        return symbol.DeclaredAccessibility switch
        {
            Accessibility.Public
                => includes.HasFlag(Accessibilities.Public)
                    && !excludes.HasFlag(Accessibilities.Public),
            Accessibility.Protected
                => includes.HasFlag(Accessibilities.Protected)
                    && !excludes.HasFlag(Accessibilities.Protected),
            Accessibility.Internal or Accessibility.Friend
                => includes.HasFlag(Accessibilities.Internal)
                    && !excludes.HasFlag(Accessibilities.Internal),
            Accessibility.ProtectedOrInternal or Accessibility.ProtectedOrFriend
                => includes.HasFlag(Accessibilities.ProtectedInternal)
                    && !excludes.HasFlag(Accessibilities.ProtectedInternal),
            Accessibility.ProtectedAndInternal or Accessibility.ProtectedAndFriend
                => includes.HasFlag(Accessibilities.PrivateProtected)
                    && !excludes.HasFlag(Accessibilities.PrivateProtected),
            Accessibility.Private
                => includes.HasFlag(Accessibilities.Private)
                    && !excludes.HasFlag(Accessibilities.Private),
            _ => false
        };
    }
}
